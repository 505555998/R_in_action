by_tailnum <- group_by(flights, tailnum)
by_tailnum
delay <- summarise(by_tailnum,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay
delay <- filter(delay, count > 20, dist < 2000)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area()
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area()
library(dplyr)
data.frame(x = letters) %>% sapply(class)
data_frame(x = letters) %>% sapply(class)
data_frame(x = 1:3, y = list(1:5, 1:10, 1:20))
data_frame(x = 1:5) %>% class()
$
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
Indometh
wide <- reshape(data = Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
attributes(wide)
long_data = reshape(wide)
long_data
reshape(wide, idvar = "Subject", varying = list(2:12),
v.names = "conc", direction = "long")
long.data = data.frame(subj = rep(1:4), each=3, time = rep(1:3),
x = rnorm(12), y=rnorm(12))
long.data
long.data = data.frame(subj = rep(1:4,each=3),  time = rep(1:3),
x = rnorm(12), y=rnorm(12))
long.data
wide <- reshape(data = long.data,
v.names = c("x", "y"),
idvar = "subj",
timevar = "time",
direction = "wide")
wide
long_data = reshape(wide)
long_data
widedata = data.frame(matrix(c(1:4, rnorm(24)), nrow = 4, byrow = FALSE))
colnames(widedata) = c("subj", "x1", "x2", "x3", "y1", "y2", "y3")
widedata
reshape(widedata,
idvar = "subj",
varying = list(c("x1", "x2", "x3"),c("y1", "y2", "y3")),
v.names = c("x", "y"),
direction = "long")
melt(long.data, id = c('subj', 'time'))
library(reshape)
melt(long.data, id = c('subj', 'time'))
long.data
stack.data = melt(long.data, id = c('subj', 'time'))
wide.data = cast(subj~variable + time, data = stack.data)
wide.data
wide.data2 = cast(subj~variable | time, data = stack.data)
wide.data2
wide.data3 = cast(subj~variable ,subset = variable =="x", data = stack.data)
wide.data3 = cast(subj~variable+time ,subset = variable =="x", data = stack.data)
wide.data3
wide.data = cast(subj + time ~ variable ,fun.aggregate =mean, data = stack.data)
wide.data4 = cast(subj + time ~ variable ,fun.aggregate =mean, data = stack.data)
wide.data4
wide.data
stack.data = melt(long.data, id = c('subj', 'time'))
wide.data4 = cast(subj + time ~ variable ,fun.aggregate =mean, data = stack.data)
wide.data4
wide.data4 = cast(subj  ~ variable ,fun.aggregate =mean, data = stack.data)
wide.data4
attach(leadership)
attach(leadership)
startdate <- as.Date("2009-01-01")
weekdays(startdate)
months(startdate)
quarters(startdate)
julian(startdate, origin = as.Date("2012-10-3"))
ISOdatetime(2012,10,3,7,15,04,tz = 'GTM') #数值型数据
ISOdatetime(2012,10,3,7,15,04,tz = 'GMT') #数值型数据
ISOdatetime("2012","10","3","7","15","04",tz = 'GMT')#字符型
maydatatime = data.frame(matrix(c(2012, 2011, 10, 12, 3, 5,
11,8,20, 30, 10, 15), nrow = 2))
maydatetime = data.frame(matrix(c(2012, 2011, 10, 12, 3, 5,
11,8,20, 30, 10, 15), nrow = 2))
colnames(mydatetime) = c("year", "month", "day",
"hour", "minute", "second")
mydatetime = data.frame(matrix(c(2012, 2011, 10, 12, 3, 5,
11,8,20, 30, 10, 15), nrow = 2))
colnames(mydatetime) = c("year", "month", "day",
"hour", "minute", "second")
mydatetime
mydatetime$datetime = ISOdatetime(year = mydatetime[,1],
month =mydatetime[,2],
day = mydatetime[,3],
hour = mydatetime[,4],
minute = mydatetime[,5],
second = mydatetime[,6])
mydatetime
mydatetime$datetime = ISOdatetime(year = mydatetime[,1],
month =mydatetime[,2],
day = mydatetime[,3],
hour = mydatetime[,4],
minute = mydatetime[,5],
second = mydatetime[,6])
ISOdatetime(year = mydatetime[,1],
month = mydatetime[,2],
day = mydatetime[,3],
hour = mydatetime[,4],
minute = mydatetime[,5],
second = mydatetime[,6],
tz = 'GMT')
mydatetime$datetime = ISOdatetime(year = mydatetime[,1],
month = mydatetime[,2],
day = mydatetime[,3],
hour = mydatetime[,4],
min = mydatetime[,5],
sec = mydatetime[,6],
tz = 'GMT')
mydatetime
city = 'shanghai'
nchar(city)
which(city =='a')
which(city =="a")
letter = c("a", "b", "d", "h")
which(letter =="d")
x <- c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech")
substr(x, 2, 5)
substring(x, 2, 4:6)
substring(x, last=c(1,2), last = c(4,5,6))
substring(x, last=c(1,2), last = c(4,5,))
substring(x, last=c(1,2), last = c(4,5))
substring(x, first=c(1,2), last = c(4,5))
mystring = 'My name is Zhijie'
substring(mystring, 12, 17) = 'hong'
mystring
gsub(pattern = "([ab])", replacement = "\\1_\\1_", "abc and ABC")
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
strsplit(x, "e")
x2 = strsplit(x, "e")
x3 = unlist(x2)
x3
x3 = unlist(x2, use.names = FALSE)
x3
str = "one two three four"
strplit(str)
strsplit(str)
strsplit(str)
x2 = strsplit(x, "e")
str = "one two three four"
strsplit(str)
strsplit(str, '')
strsplit(str, ' ')
str = "one   two  three  four"
strsplit(str, ' ')
strsplit(str, ' +')
txt <- c("The", "licenses", "for", "most", "software", "are",
"designed", "to", "take", "away", "your", "freedom",
"to", "share", "and", "change", "it.",
"", "By", "contrast,", "the", "GNU", "General", "Public", "License",
"is", "intended", "to", "guarantee", "your", "freedom", "to",
"share", "and", "change", "free", "software", "--",
"to", "make", "sure", "the", "software", "is",
"free", "for", "all", "its", "users")
i <- grep("[gu]", txt)
i
stopifnot( txt[i] == grep("[gu]", txt, value = TRUE)
）
stopifnot( txt[i] == grep("[gu]", txt, value = TRUE))
regexpr("en", txt)
gregexpr("e", txt)
regexpr("en", txt)
re = regexpr("en", txt)
res = substring(txt,re, re + attr(re, "match.length") -1)
res
gre = gregexpr("e", txt)
getexpr = function(str, greg){
substring(str, grep, grep + attr(grep, "match.length") -1)
}
gres = mapply(FUN = getexpr, txt, gre)
gre
gre = gregexpr("en", txt)
getexpr = function(str, greg){
substring(str, grep, grep + attr(grep, "match.length") -1)
}
gres = mapply(FUN = getexpr, txt, gre)
txt <- c("The", "licenses", "for", "most", "software", "are",
"designed", "to", "take", "away", "your", "freedom",
"to", "share", "and", "change", "it.",
"", "By", "contrast,", "the", "GNU", "General", "Public", "License",
"is", "intended", "to", "guarantee", "your", "freedom", "to",
"share", "and", "change", "free", "software", "--",
"to", "make", "sure", "the", "software", "is",
"free", "for", "all", "its", "users")
gre = gregexpr("en", txt)
getexpr = function(str, greg){
substring(str, grep, grep + attr(grep, "match.length") -1)
}
gres = mapply(FUN = getexpr, txt, gre)
x = y = 1
cat = ("x should bi greater than y, but x =", x, "y=", y, \n)
cat = ("x should bi greater than y, but x =", x, "y=", y, \n)
cat = ("x should bi greater than y, but x =", x, "y=", y, \n)
cat = ("x should bi greater than y， but x =", x, "y=", y, \n)
cat("x should bi greater than y, but x =", x, "y=", y, \n)
cat("x should bi greater than y, but x =", x, "y=", y, "\n")
paste("one", 2, "Three", 4)
paste("x", 1:5, sep = "-")
paste(c("one", "two", "three"), collapse = "-")
paste("x", 1:5, sep = "-", collapes = "|")
c(x,y)
x = c(1,2,2,3,5,5,4)
y = c(2,3,3,5,6,5)
c(x,y)
intersect(x,y)#提取两个数组中相同的值，并把重复的值删除
setdifferent(x,y)#显示第一个一维数组有，但第二个数组无的唯一值
setdiff(x,y)#显示第一个一维数组有，但第二个数组无的唯一值
setdiff(y,x)
setequal(x,y)#两个数组是否一样
is.element(x,y)
match(x,y)
match(x$id,y$id)
vars <- c("mpg", "hp", "wt")
head(mtcars[vars])
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
library(vcd)
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
mytable
x <- ftable(mtcars[c("cyl", "vs", "am", "gear")])
x
ftable(x, row.vars = c(2, 4))
head(mtcars)
ftable(mpg + hp ~ vs + am, data = mtcars)
ftable(gear + carb ~ vs + am, data = mtcars)
sapply(x,class)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
sapply(x,class)
med.att <- apply(attitude, 2, median)
sweep(data.matrix(attitude), MARGIN = 2, STATS = med.att, FUN = '/')
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
word <- function(C, k) paste(rep.int(C, k), collapse = "")
mapply(word, LETTERS[1:6], 6:1, SIMPLIFY = FALSE)
install.packages("pryr")
setwd("E:/workspace/R/R in Action/面向对象设计")
x = 1
attr(x, 'class') = 'foo'
library(pryr)
class(x)
otype(x)
y = structure(2, class = "foo")
otype(y)
y
type(y)
type(y)
class(y)
attr(x, 'class')  = c('foo', 'bar')
class(x)
otype(x)
ftpye(teacher)
teacher = function(x, ...) UseMethod("teacher")
ftpye(teacher)
ftype(teacher)
a = 'teacher'
attr(a,'class') <- 'lecture'
teacher(a)
attr(a,'class')  =  'lecture'
otpye(a)
otpye(a)
otype(x)
otype(a)
teacher(a)
teacher = function(x, ...) UseMethod("teacher")
ftype(teacher)
teacher.lecture = function(x) print('讲课')
teacher.assignment <- function(x) print("布置作业")
teacher.correcting <- function(x) print("批改作业")
teacher.default<-function(x) print("你不是teacher")
teacher(a)
teacher
method(teacher)
methods(teacher)
methods(generic.function=predict)
methods(class=lm)
getAnywhere(teacher.lecture)
getAnywhere(teacher.lecture)
predict.ppr
getAnywhere("predict.ppr")
getS3method("predict", "ppr")
node <- function(x) UseMethod("node", x)
node.default <- function(x) "Default node"
node.father <- function(x) c("father")
node.son <- function(x) c("son", NextMethod())
n1 <- structure(1, class = c("father"))
n2 <- structure(1, class = c("son", "father"))
setClass("Person",slots=list(name="character",age="numeric"))
father<-new("Person",name="F",age=44)
father
class(father)
otype(father)
setClass("Person",slots=list(name="character",age="numeric"))
setClass("Son",slots=list(father="Person",mother="Person"),contains="Person")
father<-new("Person",name="F",age=44)
mother<-new("Person",name="M",age=39)
son<-new("Son",name="S",age=16,father=father,mother=mother)
son@name
son@age
son@father
setClass("Person",slots=list(name="character",age="numeric"))
bad2<-new("Person",name="bad",age=-1)
bad2
setValidity("Person",function(object) {
if (object@age <= 0) stop("Age is negative.")
})
bad2<-new("Person",name="bad",age=-1)
setClass("Person",slots=list(name="character",age="numeric"))
n1<-new("Person",name="n1",age=19);n1
n2<-initialize(n1,name="n2");n2
work<-function(x) cat(x, "is working")
work('Conan')
setClass("Person",slots=list(name="character",age="numeric"))
a<-new("Person",name="Conan",age=16)
work(a)
setGeneric("work",function(object) standardGeneric("work"))
setMethod("work", signature(object = "Person"), function(object) cat(object@name , "is working") )
a<-new("Person",name="Conan",age=16)
work(a)
ftype(work)
work
showMethods(work)
getMethod("work", "Person")
selectMethod("work", "Person")
existsMethod("work", "Person")
setClass("Shape",slots=list(name="character"))
setClass("Circle",contains="Shape",slots=list(radius="numeric"),prototype=list(radius = 1))
setValidity("Circle",function(object) {
if (object@radius <= 0) stop("Radius is negative.")
})
c1<-new("Circle",name="c1")
c2<-new("Circle",name="c2",radius=5)
c1
# 计算面积泛型函数（area）接口
setGeneric("area",function(obj,...) standardGeneric("area"))
area(c1)
setMethod("area","Circle",function(obj,...){
print("Area Circle Method")
pi*obj@radius^2
})
area(c1)
area(c2)
setGeneric("circum", function(obj, ...) standardGeneric("circum"))
setMethod("circum", "Circle",
function(obj, ...){
print("circum Method")
2*pi*obj@radius
}
)
circum(c1)
circum(c2)
setClass("Ellipse",contains="Shape",slots=list(radius="numeric"),prototype=list(radius=c(1,1)))
e1<-new("Ellipse",name="e1")
e2<-new("Ellipse",name="e2",radius=c(5,1))
prod(1:7)
prod(1:3)
slot(e1)
slot(e1@radius)
e1@radius
setMethod("area","Circle",function(obj,...){
cat("Circle Area :\n")
pi*obj@radius^2
})
setGeneric("circum",function(obj,...) standardGeneric("circum"))
User = setRefClass("User", fields = list(name = "character"))
u1 = User$new(name = "u1")
u1
u1
class(User)
is.object(User)
otype(User)
class(u1)
member$name
member
member<-Member$new(name="member",manager=manager)
Member<-setRefClass("Member",contains="User",fields=list(manager="User"))
manager<-User$new(name="manager")
member<-Member$new(name="member",manager=manager)
member
member$name
member$manager
otype(member$name)
otype(member$manager
)
User<-setRefClass("User",
fields=list(name="character",level='numeric'),
methods=list(
initialize = function(name,level){
print("User::initialize")
name <<- 'conan'
level <<- 1
},
addLevel = function(x) {
print('User::addLevel')
level <<- level+x
},
addHighLevel = function(){
print('User::addHighLevel')
addLevel(2)
}
)
)
u1<-User$new()
User$fields()
User$methods()
User$help("addLevel")
User$help("show")
User$accessors("level")
User$trace('addLevel')
u3<-User$new(name='u3',level=1)
u3$addLevel(2)
Animal<-setRefClass("Animal",
fields=list(name="character"),
methods=list(
initialize = function(name) name <<- 'Animal',
bark = function() print("Animal::bark")
)
)
# 创建Cat类，继承Animal类，并重写(Overwrite)了 initialize() 和 bark()。
Cat<-setRefClass("Cat",contains="Animal",
methods=list(
initialize = function(name) name <<- 'cat',
bark = function() print(paste(name,"is miao miao"))
)
)
# 创建Dog类，继承Animal类，并重写(Overwrite)了 initialize() 和 bark()。
Dog<-setRefClass("Dog",contains="Animal",
methods=list(
initialize = function(name) name <<- 'dog',
bark = function() print(paste(name,"is wang wang"))
)
)
# 创建Duck类，继承Animal类，并重写(Overwrite)了 initialize() 和 bark()。
Duck<-setRefClass("Duck",contains="Animal",
methods=list(
initialize = function(name) name <<- 'duck',
bark = function() print(paste(name,"is ga ga"))
)
)
#接
cat<-Cat$new()
cat$name
cat$bark()
dog<-Dog$new()
dog$initFields(name='Huang')
cat<-Cat$new();cat
Animal<-setRefClass("Animal",
fields=list(name="character",limbs='numeric'),
methods=list(
initialize = function(name) {
name <<- 'Animal'
limbs<<-4
},
bark = function() print("Animal::bark")
)
)
# 在Cat类的 initialize()方法中，执行callSuper()方法，调用父类的同名方法
Cat<-setRefClass("Cat",contains="Animal",
methods=list(
initialize = function(name) {
callSuper()
name <<- 'cat'
},
bark = function() print(paste(name,"is miao miao"))
)
)
# 在Dog类的 initialize()方法中，执行callSuper()方法，调用父类的同名方法
Dog<-setRefClass("Dog",contains="Animal",
methods=list(
initialize = function(name) {
callSuper()
name <<- 'dog'
},
bark = function() print(paste(name,"is wang wang"))
)
)
# 在Dog类的定义wing属性， 并在initialize()方法，定义limbs和wing属性的默认值
Duck<-setRefClass("Duck",contains="Animal",
fields=list(wing='numeric'),
methods=list(
initialize = function(name) {
name <<- 'duck'
limbs<<- 2
wing<<- 2
},
bark = function() print(paste(name,"is ga ga"))
)
)
dog<-Dog$new()
dog$initFields(name='Huang')
<-Duck$new();duck
duck<-Duck$new();duck
search()
install.packages("xtsExtra", repos="http://R-Forge.R-project.org")
library(xtsExtra)
install.packages("xtsExtra")
library(xtsExtra)
